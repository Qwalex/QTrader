const BybitAPI = require('../services/bybitApi');
const BreakoutStrategy = require('../strategies/breakoutStrategy');
const PositionManager = require('./positionManager');
const config = require('../config/config');

class TradingBot {
  constructor() {
    this.api = new BybitAPI();
    this.strategy = new BreakoutStrategy();
    this.positionManager = new PositionManager();
    this.isRunning = false;
    this.analysisInterval = null;
    this.marketData = new Map();
    this.lastAnalysis = new Map();
  }

  // –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
  async start() {
    if (this.isRunning) {
      return { success: false, error: '–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω' };
    }

    try {
      console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞...');
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
      await this.initializeMarketData();
      
      // –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
      this.isRunning = true;
      this.startAnalysis();
      
      console.log('‚úÖ –¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ');
      return { success: true, message: '–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω' };
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', error);
      return { success: false, error: error.message };
    }
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
  stop() {
    if (!this.isRunning) {
      return { success: false, error: '–ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω' };
    }

    try {
      console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞...');
      
      this.isRunning = false;
      
      if (this.analysisInterval) {
        clearInterval(this.analysisInterval);
        this.analysisInterval = null;
      }
      
      console.log('‚úÖ –¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      return { success: true, message: '–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' };
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞:', error);
      return { success: false, error: error.message };
    }
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  async initializeMarketData() {
    console.log('üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    
    for (const symbol of config.symbols) {
      try {
        // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        const candles = await this.api.getKlineData(symbol, '15', 200);
        this.marketData.set(symbol, {
          candles: candles,
          lastUpdate: Date.now()
        });
        
        console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–ª—è ${symbol}`);
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${symbol}:`, error.message);
      }
    }
  }

  // –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
  startAnalysis() {
    // –ê–Ω–∞–ª–∏–∑ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    this.analysisInterval = setInterval(async () => {
      if (!this.isRunning) return;
      
      try {
        await this.performAnalysis();
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error);
      }
    }, 5 * 60 * 1000); // 5 –º–∏–Ω—É—Ç

    // –ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –ø–µ—Ä–≤—ã–π –∞–Ω–∞–ª–∏–∑
    this.performAnalysis();
  }

  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞
  async performAnalysis() {
    console.log('üîç –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞...');
    
    const analysisResults = [];
    
    for (const symbol of config.symbols) {
      try {
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        await this.updateMarketData(symbol);
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        const marketData = this.marketData.get(symbol);
        if (!marketData || marketData.candles.length < 100) {
          continue;
        }
        
        // –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        const analysis = this.strategy.analyze(marketData.candles);
        
        if (analysis.error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ ${symbol}:`, analysis.error);
          continue;
        }
        
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        this.lastAnalysis.set(symbol, analysis);
        analysisResults.push({ symbol, analysis });
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
        if (analysis.signal) {
          await this.processSignal(symbol, analysis.signal, analysis.currentPrice);
        }
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ ${symbol}:`, error);
      }
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π
    await this.updatePositions();
    
    console.log(`‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤: ${analysisResults.length}`);
    return analysisResults;
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  async updateMarketData(symbol) {
    try {
      const newCandles = await this.api.getKlineData(symbol, '15', 50);
      const currentData = this.marketData.get(symbol);
      
      if (currentData) {
        // –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        const allCandles = [...currentData.candles, ...newCandles];
        
        // –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        const uniqueCandles = this.removeDuplicateCandles(allCandles);
        
        // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–≤–µ—á–µ–π
        const limitedCandles = uniqueCandles.slice(-200);
        
        this.marketData.set(symbol, {
          candles: limitedCandles,
          lastUpdate: Date.now()
        });
      }
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö ${symbol}:`, error);
    }
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Å–≤–µ—á–µ–π
  removeDuplicateCandles(candles) {
    const seen = new Set();
    return candles.filter(candle => {
      const key = candle.timestamp;
      if (seen.has(key)) {
        return false;
      }
      seen.add(key);
      return true;
    });
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
  async processSignal(symbol, signal, currentPrice) {
    console.log(`üìà –°–∏–≥–Ω–∞–ª ${signal.type} –¥–ª—è ${symbol} –ø–æ —Ü–µ–Ω–µ ${currentPrice}`);
    
    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π
      const existingPosition = this.positionManager.positions.get(symbol);
      if (existingPosition) {
        console.log(`‚ö†Ô∏è –ü–æ–∑–∏—Ü–∏—è –ø–æ ${symbol} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
        return;
      }
      
      // –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏
      const result = this.positionManager.openPosition(symbol, signal, currentPrice);
      
      if (result.success) {
        console.log(`‚úÖ ${result.message}`);
        console.log(`üí∞ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: ${result.position.size.toFixed(2)}`);
        console.log(`üõë –°—Ç–æ–ø-–ª–æ—Å—Å: ${result.position.stopLoss.toFixed(4)}`);
        console.log(`üéØ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: ${result.position.takeProfit.toFixed(4)}`);
      } else {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏: ${result.error}`);
      }
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è ${symbol}:`, error);
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π
  async updatePositions() {
    try {
      // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö —Ü–µ–Ω
      const marketData = {};
      
      for (const symbol of config.symbols) {
        try {
          const ticker = await this.api.getTickerPrice(symbol);
          marketData[symbol] = ticker;
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã ${symbol}:`, error);
        }
      }
      
      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π
      const closedPositions = this.positionManager.updatePositions(marketData);
      
      if (closedPositions.length > 0) {
        console.log(`üîí –ó–∞–∫—Ä—ã—Ç–æ –ø–æ–∑–∏—Ü–∏–π: ${closedPositions.length}`);
        closedPositions.forEach(pos => {
          console.log(`üìä ${pos.symbol}: ${pos.closeReason}, PnL: ${pos.pnl.toFixed(2)}`);
        });
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π:', error);
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞
  getStatus() {
    const statistics = this.positionManager.getStatistics();
    const activePositions = this.positionManager.getActivePositions();
    
    return {
      isRunning: this.isRunning,
      statistics: statistics,
      activePositions: activePositions,
      symbols: config.symbols,
      lastAnalysis: Object.fromEntries(this.lastAnalysis),
      marketDataStatus: Array.from(this.marketData.entries()).map(([symbol, data]) => ({
        symbol,
        candlesCount: data.candles.length,
        lastUpdate: data.lastUpdate
      }))
    };
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
  getAnalysis(symbol) {
    return this.lastAnalysis.get(symbol) || null;
  }

  // –†—É—á–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏
  async manualOpenPosition(symbol, type, size) {
    if (!this.isRunning) {
      return { success: false, error: '–ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω' };
    }
    
    try {
      const ticker = await this.api.getTickerPrice(symbol);
      const signal = {
        type: type === 'LONG' ? 'BUY' : 'SELL',
        level: ticker.price,
        currentPrice: ticker.price,
        strength: 1,
        volume: ticker.volume24h,
        timestamp: Date.now()
      };
      
      return this.positionManager.openPosition(symbol, signal, ticker.price);
      
    } catch (error) {
      return { success: false, error: error.message };
    }
  }

  // –†—É—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏
  manualClosePosition(symbol) {
    return this.positionManager.closePosition(symbol, 'MANUAL');
  }

  // –°–±—Ä–æ—Å –¥–µ–º–æ-–±–∞–ª–∞–Ω—Å–∞
  resetDemoBalance() {
    return this.positionManager.resetDemoBalance();
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫
  getTradeHistory(limit = 50) {
    return this.positionManager.getTradeHistory(limit);
  }
}

module.exports = TradingBot; 